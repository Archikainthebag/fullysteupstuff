name: RDP
on:
  workflow_dispatch:
jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600 # Max 6 hours on GitHub-hosted runners
    steps:
      - name: Enable RDP + Firewall + Prevent Disconnects
        run: |
          # Enable RDP
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          # Allow RDP through firewall
          netsh advfirewall firewall delete rule name="AllowRDP" >$null 2>&1
          netsh advfirewall firewall add rule name="AllowRDP" dir=in action=allow protocol=TCP localport=3389
          # Prevent session timeouts
          $regPath = 'HKLM:\SOFTWARE\Policies\Microsoft\Windows NT\Terminal Services'
          if (-not (Test-Path $regPath)) { New-Item -Path $regPath -Force | Out-Null }
          Set-ItemProperty -Path $regPath -Name "MaxDisconnectionTime" -Value 0 -Type DWord -Force
          Set-ItemProperty -Path $regPath -Name "MaxIdleTime" -Value 0 -Type DWord -Force
          Set-ItemProperty -Path $regPath -Name "MaxSessionTime" -Value 0 -Type DWord -Force
          # Disable screensaver lock
          Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "ScreenSaveTimeOut" -Value "0" -Force
          Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "ScreenSaverIsSecure" -Value "0" -Force
          Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "SCRNSAVE.EXE" -Value "" -Force
          # Disable power saving / hibernate
          powercfg /change standby-timeout-ac 0
          powercfg /change monitor-timeout-ac 0
          powercfg /change disk-timeout-ac 0
          powercfg /hibernate off
          # Restart RDP service
          Restart-Service TermService -Force

      - name: Create RDP User (Password = 1234)
        run: |
          secedit /export /cfg $env:TEMP\secpol.cfg
          (Get-Content $env:TEMP\secpol.cfg).Replace("PasswordComplexity = 1","PasswordComplexity = 0") | Set-Content $env:TEMP\secpol.cfg
          secedit /configure /db $env:windir\security\local.sdb /cfg $env:TEMP\secpol.cfg /areas SECURITYPOLICY
          gpupdate /force
          $password = "1234"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          if (Get-LocalUser -Name "RDP" -ErrorAction SilentlyContinue) { Remove-LocalUser -Name "RDP" }
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          echo "RDP_CREDS=User: RDP | Password: $password" >> $env:GITHUB_ENV

      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -UseBasicParsing
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Start Tailscale
        run: |
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-$env:GITHUB_RUN_ID
          $tsIP = $null
          for ($i=0; $i -lt 10; $i++) {
            $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4
            if ($tsIP) { break }
            Start-Sleep -Seconds 5
          }
          if (-not $tsIP) { Write-Error "Tailscale IP not assigned"; exit 1 }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Host "Tailscale IP: $tsIP"

      - name: Start SOCKS5 Proxy (gost) on port 1080
        run: |
          $tsIP = $env:TAILSCALE_IP
          if (-not $tsIP) { Write-Error "TAILSCALE_IP not found"; exit 1 }
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          $gostUrl = "https://github.com/go-gost/gost/releases/download/v3.0.0/gost_3.0.0_windows_amd64.zip"
          $zipPath = "$env:TEMP\gost.zip"
          $extractPath = "C:\gost"
          Invoke-WebRequest -Uri $gostUrl -OutFile $zipPath -UseBasicParsing
          Expand-Archive -Path $zipPath -DestinationPath $extractPath -Force
          $exePath = (Get-ChildItem $extractPath -Recurse | Where-Object {$_.Name -eq "gost.exe"}).FullName
          netsh advfirewall firewall delete rule name="SOCKS5-1080" >$null 2>&1
          netsh advfirewall firewall add rule name="SOCKS5-1080" dir=in action=allow protocol=TCP localport=1080
          Start-Process -FilePath $exePath -ArgumentList '-L=:1080' -WindowStyle Hidden
          Write-Host "SOCKS5 proxy listening on: $tsIP:1080"

      - name: Install Visual Studio Code
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          choco install -y vscode

      - name: AdsPower Notice
        run: |
          Write-Host "⚠️ AdsPower installer requires manual download from https://www.adspower.com/download"
          Write-Host "Automated install not possible due to GitHub runner network restrictions."

      - name: Create Downloads\saranggggg and add files for RDP user
        run: |
          # Target folder under RDP user's Downloads
          $rdpUser = "RDP"
          $downloadsDir = "C:\Users\$rdpUser\Downloads\saranggggg"
          # Ensure Downloads folder exists (Downloads may not exist by default)
          if (-not (Test-Path "C:\Users\$rdpUser\Downloads")) {
            New-Item -Path "C:\Users\$rdpUser\Downloads" -ItemType Directory -Force | Out-Null
          }
          New-Item -Path $downloadsDir -ItemType Directory -Force | Out-Null

          # Create humanex.py (sample content)
          $humanexPy = @"
import sys
import time
# sample humanex placeholder
def main():
    print('humanex placeholder')
if __name__ == '__main__':
    main()
"@
          $humanexPyPath = Join-Path $downloadsDir "humanex.py"
          $humanexPy | Out-File -FilePath $humanexPyPath -Encoding utf8 -Force

          # Create user_agent.txt (sample user agents, one per line)
          $uaContent = @"
Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36
Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:116.0) Gecko/20100101 Firefox/116.0
"@
          $uaPath = Join-Path $downloadsDir "user_agent.txt"
          $uaContent | Out-File -FilePath $uaPath -Encoding utf8 -Force

          # Create proxy.txt (sample proxy lines)
          $proxyContent = @"
127.0.0.1:8080
# add proxies in ip:port format, one per line
"@
          $proxyPath = Join-Path $downloadsDir "proxy.txt"
          $proxyContent | Out-File -FilePath $proxyPath -Encoding utf8 -Force

          # Create insuranceRPA.json (sample JSON)
          $jsonContent = @"
{
  "name": "insuranceRPA",
  "version": "1.0",
  "settings": {
    "timeout": 30,
    "max_threads": 5
  }
}
"@
          $jsonPath = Join-Path $downloadsDir "insuranceRPA.json"
          $jsonContent | Out-File -FilePath $jsonPath -Encoding utf8 -Force

          Write-Host "Created folder and files at: $downloadsDir"
          Get-ChildItem -Path $downloadsDir | ForEach-Object { Write-Host " - $($_.Name)" }

      - name: Install Python packages + Playwright (system wide)
        shell: powershell
        run: |
          # Update pip and install packages in the runner's Python
          # Use python -m pip to avoid ambiguity. Then run Playwright installer.
          python -m pip install --upgrade pip
          python -m pip install requests PyQt5 playwright
          # Playwright needs browser binaries installed:
          # Use python -m playwright install to install browsers for Playwright Python
          python -m playwright install

          Write-Host "Installed: requests, PyQt5, playwright and Playwright browsers."

      - name: Verify RDP
        run: |
          $tsIP = $env:TAILSCALE_IP
          Write-Host "Tailscale IP: $tsIP"
          $test = Test-NetConnection -ComputerName $tsIP -Port 3389
          if (-not $test.TcpTestSucceeded) { exit 1 }
          Write-Host "✅ RDP Port reachable"

      - name: Keep Session Alive
        run: |
          $tsIP = $env:TAILSCALE_IP
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $tsIP"
          Write-Host "Username: RDP"
          Write-Host "Password: 1234"
          Write-Host "SOCKS5 Proxy: $tsIP:1080"
          Write-Host "VSCode: Installed"
          Write-Host "AdsPower: Manual download required"
          Write-Host "==================`n"
          while ($true) {
            Write-Host "[$(Get-Date)] RDP Active"
            Start-Sleep -Seconds 300
          }
